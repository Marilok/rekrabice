"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProdServer = exports.startProdServer = exports.startDevServer = void 0;
var shelljs_1 = __importDefault(require("shelljs"));
var processesToKill = [];
function execAsync(command) {
    var process = shelljs_1.default.exec(command, { async: true });
    processesToKill.push(process);
    process.on('close', function () {
        processesToKill = processesToKill.filter(function (p) { return p !== process; });
    });
}
var startDevServer = function (packageManager, port) {
    execAsync("".concat(packageManager, " run dev -- -p ").concat(port));
};
exports.startDevServer = startDevServer;
var startProdServer = function (packageManager, port) {
    execAsync("".concat(packageManager, " run start -- -p ").concat(port));
};
exports.startProdServer = startProdServer;
var buildProdServer = function (packageManager) {
    execAsync("".concat(packageManager, " run build"));
    // if build fails for whatever reason, make sure the shell actually exits
    process.on('close', function (code) {
        shelljs_1.default.exit(code !== null && code !== void 0 ? code : undefined);
    });
};
exports.buildProdServer = buildProdServer;
// based on https://stackoverflow.com/a/14032965
var exitHandler = function (options) { return function (code) {
    if (processesToKill.length > 0) {
        console.log('shutting down %d subprocesses', processesToKill.length);
    }
    processesToKill.forEach(function (p) {
        if (p.connected) {
            p.kill();
        }
    });
    if (options === null || options === void 0 ? void 0 : options.exit) {
        shelljs_1.default.exit(code);
    }
}; };
// do something when app is closing
process.on('exit', exitHandler());
// catches ctrl+c event
process.on('SIGINT', exitHandler({ exit: true }));
//  catches "kill pid" (for example: nodemon restart)
process.on('SIGUSR1', exitHandler({ exit: true }));
process.on('SIGUSR2', exitHandler({ exit: true }));
// catches uncaught exceptions
process.on('uncaughtException', exitHandler({ exit: true }));
